const Anthropic = require('@anthropic-ai/sdk');

// Inicializace Claude API klienta ‚Äì kl√≠ƒç z ENV
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY || '',
});

// Konfigurace pro Claude API
const CLAUDE_CONFIG = {
  model: process.env.ANTHROPIC_MODEL || 'claude-3-5-sonnet-20241022',
  max_tokens: 4000,
  temperature: 0.1, // N√≠zk√° teplota pro konzistentn√≠ v√Ωsledky
};

// Chunking velk√Ωch dokument≈Ø (Claude m√° limit ~200k token≈Ø)
function chunkDocument(text, maxChunkSize = 15000) {
  const chunks = [];
  const sentences = text.split(/[.!?]+/);
  let currentChunk = '';
  
  for (const sentence of sentences) {
    if (currentChunk.length + sentence.length > maxChunkSize) {
      if (currentChunk.trim()) {
        chunks.push(currentChunk.trim());
        currentChunk = sentence;
      }
    } else {
      currentChunk += sentence + '.';
    }
  }
  
  if (currentChunk.trim()) {
    chunks.push(currentChunk.trim());
  }
  
  return chunks;
}

// Detekce typu vyhled√°v√°n√≠ pro optim√°ln√≠ prompt
function detectSearchType(query) {
  const queryLower = query.toLowerCase();
  
  // Rodn√° ƒç√≠sla
  if (queryLower.includes('rodn√© ƒç√≠slo') || queryLower.includes('rodne cislo') || 
      queryLower.includes('rƒç') || /\d{6}\/?\d{4}/.test(query)) {
    return 'personal_id';
  }
  
  // Telefonn√≠ ƒç√≠sla
  if (queryLower.includes('telefon') || queryLower.includes('mobil') || 
      queryLower.includes('ƒç√≠slo') || /[\+]?[\d\s\-\(\)]{9,}/.test(query)) {
    return 'phone_number';
  }
  
  // Smlouvy a dokumenty
  if (queryLower.includes('smlouva') || queryLower.includes('dokument') || 
      queryLower.includes('ƒç√≠slo smlouvy') || queryLower.includes('reference')) {
    return 'contract_document';
  }
  
  // Jm√©na osob
  if (queryLower.includes('jm√©no') || queryLower.includes('osoba') || 
      /^[A-Z√Åƒåƒé√âƒö√ç≈á√ì≈ò≈†≈§√ö≈Æ√ù≈Ω][a-z√°ƒçƒè√©ƒõ√≠≈à√≥≈ô≈°≈•√∫≈Ø√Ω≈æ]+ [A-Z√Åƒåƒé√âƒö√ç≈á√ì≈ò≈†≈§√ö≈Æ√ù≈Ω][a-z√°ƒçƒè√©ƒõ√≠≈à√≥≈ô≈°≈•√∫≈Ø√Ω≈æ]+/.test(query)) {
    return 'person_name';
  }
  
  // Obecn√© vyhled√°v√°n√≠
  return 'general';
}

// Specializovan√© prompty pro r≈Øzn√© typy vyhled√°v√°n√≠
function createSearchPrompt(query, documentText, searchType) {
  const baseInstructions = `
Jsi odborn√Ω asistent pro vyhled√°v√°n√≠ v ƒçesk√Ωch a anglick√Ωch textech. 
Tv√Ωm √∫kolem je naj√≠t V≈†ECHNY relevantn√≠ v√Ωskyty zadan√©ho dotazu v dokumentu.

KRITICK√â PO≈ΩADAVKY:
- Vra≈• pouze 100% p≈ôesn√© a relevantn√≠ n√°lezy
- ≈Ω√°dn√© fale≈°n√© pozitivy - radƒõji m√©nƒõ n√°lez≈Ø, ale spr√°vn√Ωch
- Zahr≈à r≈Øzn√© form√°ty a varianty hledan√©ho v√Ωrazu
- Pro ka≈æd√Ω n√°lez poskytni p≈ôesn√Ω kontext (50-80 znak≈Ø p≈ôed a po)
- Odpovƒõz POUZE ve form√°tu JSON

Hledan√Ω v√Ωraz: "${query}"
`;

  let specificInstructions = '';
  
  switch (searchType) {
    case 'personal_id':
      specificInstructions = `
SPECIFICK√â INSTRUKCE PRO RODN√Å ƒå√çSLA:
- Hledej form√°ty: XXXXXX/XXXX, XXXXXX-XXXX, XXXXXXXXXX
- Zahr≈à varianty s lom√≠tkem i bez lom√≠tka
- Validuj ƒçesk√© rodn√© ƒç√≠slo (6+4 cifry, mo≈æn√° lom√≠tka/pomlƒçky)
- Rozpoznej tak√© zm√≠nky typu "rodn√© ƒç√≠slo:", "Rƒå:", "narozen√≠:"
`;
      break;
      
    case 'phone_number':
      specificInstructions = `
SPECIFICK√â INSTRUKCE PRO TELEFONN√ç ƒå√çSLA:
- ƒåesk√© form√°ty: +420 XXX XXX XXX, 420XXXXXXXXX, XXXXXXXXX
- Mezin√°rodn√≠ form√°ty: +XX XXX XXX XXX
- Varianty s pomlƒçkami, mezerami, z√°vorkami
- Mobiln√≠ i pevn√© linky
- Zahr≈à zm√≠nky typu "telefon:", "mobil:", "tel.:"
`;
      break;
      
    case 'contract_document':
      specificInstructions = `
SPECIFICK√â INSTRUKCE PRO SMLOUVY/DOKUMENTY:
- Hledej ƒç√≠sla smluv, dokument≈Ø, referenƒçn√≠ch ƒç√≠sel
- Form√°ty: SM-2024-001, Smlouva ƒç. 123/2024, DOC-XXXX
- Datumy ve form√°tech: DD.MM.YYYY, DD/MM/YYYY, YYYY-MM-DD
- Zahr≈à zm√≠nky typu "smlouva ƒç.", "dokument ƒç.", "ref.:"
`;
      break;
      
    case 'person_name':
      specificInstructions = `
SPECIFICK√â INSTRUKCE PRO JM√âNA OSOB:
- Hledej cel√° jm√©na i jejich ƒç√°sti
- ƒåesk√© i ciz√≠ jm√©na s diakritikou
- Varianty: Jm√©no P≈ô√≠jmen√≠, P≈ô√≠jmen√≠ Jm√©no
- Tituly p≈ôed/za jm√©nem: Ing., Ph.D., atd.
- Zahr≈à r≈Øzn√© sklo≈àov√°n√≠ ƒçesk√Ωch jmen
`;
      break;
      
    default:
      specificInstructions = `
SPECIFICK√â INSTRUKCE PRO OBECN√â VYHLED√ÅV√ÅN√ç:
- Hledej p≈ôesn√© shody i podobn√© varianty
- Zahr≈à r≈Øzn√© form√°ty psan√≠ (velk√°/mal√° p√≠smena)
- Rozpoznej synonyma a souvisej√≠c√≠ v√Ωrazy
- Fuzzy matching pro p≈ôeklepy a podobn√© tvary
`;
  }

  const outputFormat = `
FORM√ÅT ODPOVƒöDI (JSON):
{
  "results": [
    {
      "match": "nalezen√Ω text",
      "context": "...kontext p≈ôed...NALEZEN√ù TEXT...kontext po...",
      "position": pozice_v_textu,
      "confidence": 0.95,
      "type": "typ_n√°lezu"
    }
  ],
  "summary": {
    "total_found": poƒçet_n√°lez≈Ø,
    "search_type": "typ_vyhled√°v√°n√≠",
    "confidence_avg": pr≈Ømƒõrn√°_jistota
  }
}
`;

  return `${baseInstructions}

${specificInstructions}

${outputFormat}

DOKUMENT K PROHLED√ÅN√ç:
${documentText}

Nyn√≠ proveƒè vyhled√°v√°n√≠ a vra≈• v√Ωsledky v po≈æadovan√©m JSON form√°tu.`;
}

// Hlavn√≠ funkce pro vyhled√°v√°n√≠
async function searchInDocument(query, documentText) {
  try {
    console.log(`üîç Spou≈°t√≠m vyhled√°v√°n√≠ pro: "${query}"`);
    console.log(`üìÑ D√©lka dokumentu: ${documentText.length} znak≈Ø`);
    
    const searchType = detectSearchType(query);
    console.log(`üéØ Detekovan√Ω typ vyhled√°v√°n√≠: ${searchType}`);
    
    // Pro velk√© dokumenty pou≈æijeme chunking
    const chunks = chunkDocument(documentText, 15000);
    console.log(`üìù Dokument rozdƒõlen na ${chunks.length} ƒç√°st√≠`);
    
    let allResults = [];
    let positionOffset = 0;
    
    // Zpracov√°n√≠ ka≈æd√©ho chunku
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      console.log(`‚ö° Zpracov√°v√°m ƒç√°st ${i + 1}/${chunks.length} (${chunk.length} znak≈Ø)`);
      
      const prompt = createSearchPrompt(query, chunk, searchType);
      
      try {
        const response = await anthropic.messages.create({
          ...CLAUDE_CONFIG,
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ]
        });
        
        const responseText = response.content[0].text;
        console.log(`üì• Claude odpovƒõƒè pro ƒç√°st ${i + 1}:`, responseText.substring(0, 200) + '...');
        
        // Parsing JSON odpovƒõdi
        let parsedResponse;
        try {
          // Pokus√≠me se naj√≠t JSON v odpovƒõdi
          const jsonMatch = responseText.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            parsedResponse = JSON.parse(jsonMatch[0]);
          } else {
            console.warn(`‚ö†Ô∏è ≈Ω√°dn√Ω JSON nenalezen v odpovƒõdi pro ƒç√°st ${i + 1}`);
            continue;
          }
        } catch (parseError) {
          console.error(`‚ùå Chyba p≈ôi parsov√°n√≠ JSON pro ƒç√°st ${i + 1}:`, parseError);
          console.log('Raw response:', responseText);
          continue;
        }
        
        // P≈ôid√°n√≠ v√Ωsledk≈Ø s √∫pravou pozice
        if (parsedResponse.results && Array.isArray(parsedResponse.results)) {
          const resultsWithOffset = parsedResponse.results.map(result => ({
            ...result,
            position: (result.position || 0) + positionOffset,
            chunkIndex: i + 1
          }));
          
          allResults = allResults.concat(resultsWithOffset);
          console.log(`‚úÖ P≈ôid√°no ${resultsWithOffset.length} v√Ωsledk≈Ø z ƒç√°sti ${i + 1}`);
        }
        
        // Mal√° pauza mezi dotazy
        if (i < chunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
        
      } catch (chunkError) {
        console.error(`‚ùå Chyba p≈ôi zpracov√°n√≠ ƒç√°sti ${i + 1}:`, chunkError);
        // Pokraƒçujeme s dal≈°√≠m chunkem
      }
      
      positionOffset += chunk.length;
    }
    
    // Deduplikace a ≈ôazen√≠ v√Ωsledk≈Ø
    const uniqueResults = removeDuplicates(allResults);
    const sortedResults = uniqueResults.sort((a, b) => (a.position || 0) - (b.position || 0));
    
    console.log(`üéâ Vyhled√°v√°n√≠ dokonƒçeno: ${sortedResults.length} unik√°tn√≠ch v√Ωsledk≈Ø`);
    
    return sortedResults;
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi vyhled√°v√°n√≠:', error);
    throw new Error(`Claude API error: ${error.message}`);
  }
}

// Odstranƒõn√≠ duplik√°t≈Ø na z√°kladƒõ podobnosti
function removeDuplicates(results) {
  const unique = [];
  
  for (const result of results) {
    const isDuplicate = unique.some(existing => {
      // Kontrola podobnosti na z√°kladƒõ match textu a pozice
      const matchSimilarity = result.match && existing.match && 
        result.match.toLowerCase().trim() === existing.match.toLowerCase().trim();
      
      const positionSimilarity = Math.abs((result.position || 0) - (existing.position || 0)) < 50;
      
      return matchSimilarity || positionSimilarity;
    });
    
    if (!isDuplicate) {
      unique.push(result);
    }
  }
  
  return unique;
}

// Rate limiting a retry mechanismus
async function callClaudeWithRetry(prompt, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await anthropic.messages.create({
        ...CLAUDE_CONFIG,
        messages: [{ role: 'user', content: prompt }]
      });
      
      return response;
      
    } catch (error) {
      console.error(`‚ùå Claude API pokus ${attempt}/${retries} selhal:`, error.message);
      
      if (attempt === retries) {
        throw error;
      }
      
      // Exponential backoff
      const delay = Math.pow(2, attempt) * 1000;
      console.log(`‚è≥ ƒåek√°m ${delay}ms p≈ôed dal≈°√≠m pokusem...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

module.exports = {
  searchInDocument,
  detectSearchType,
  chunkDocument
};