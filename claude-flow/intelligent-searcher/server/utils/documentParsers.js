const mammoth = require('mammoth');
const pdf = require('pdf-parse');
const yauzl = require('yauzl');
const xlsx = require('xlsx');
const iconv = require('iconv-lite');
const jschardet = require('jschardet');
const { convertPagesToText } = require('./pagesConverter');

/**
 * Utility funkce pro detekci a dek√≥dov√°n√≠ textu
 */
function detectAndDecodeText(buffer) {
  try {
    const detected = jschardet.detect(buffer);
    const encoding = detected.encoding || 'utf-8';
    
    console.log(`Detekovan√© k√≥dov√°n√≠: ${encoding} (confidence: ${detected.confidence})`);
    
    if (encoding.toLowerCase().includes('windows-1250') || 
        encoding.toLowerCase().includes('cp1250')) {
      return iconv.decode(buffer, 'cp1250');
    } else if (encoding.toLowerCase().includes('iso-8859-2')) {
      return iconv.decode(buffer, 'iso-8859-2');
    } else {
      return iconv.decode(buffer, 'utf-8');
    }
  } catch (error) {
    console.error('Chyba p≈ôi dek√≥dov√°n√≠ textu:', error);
    return buffer.toString('utf-8');
  }
}

/**
 * Parser pro Microsoft Word dokumenty (.docx)
 */
async function parseDocx(buffer) {
  try {
    console.log('üìÑ Zpracov√°v√°m DOCX soubor...');
    
    const result = await mammoth.extractRawText({ buffer });
    
    if (!result.text || result.text.trim().length === 0) {
      throw new Error('Dokument neobsahuje ≈æ√°dn√Ω ƒçiteln√Ω text');
    }
    
    console.log(`‚úÖ Extrahov√°no ${result.text.length} znak≈Ø z DOCX`);
    
    return {
      success: true,
      text: result.text.trim(),
      metadata: {
        format: 'docx',
        length: result.text.length
      }
    };
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ DOCX:', error);
    return {
      success: false,
      error: `Chyba p≈ôi ƒçten√≠ DOCX souboru: ${error.message}`,
      text: null
    };
  }
}

/**
 * Parser pro PDF dokumenty (.pdf)
 */
async function parsePdf(buffer) {
  try {
    console.log('üìÑ Zpracov√°v√°m PDF soubor...');
    
    const data = await pdf(buffer, {
      // Optimalizace pro rychlej≈°√≠ zpracov√°n√≠
      max: 0, // neomezenƒõ stran
      version: 'v1.10.100'
    });
    
    if (!data.text || data.text.trim().length === 0) {
      throw new Error('PDF neobsahuje ≈æ√°dn√Ω extraktovateln√Ω text nebo je ≈°ifrovan√Ω');
    }
    
    // ƒåi≈°tƒõn√≠ textu od nadbyteƒçn√Ωch mezer a zalomen√≠
    const cleanText = data.text
      .replace(/\s+/g, ' ')
      .replace(/\n\s*\n/g, '\n\n')
      .trim();
    
    console.log(`‚úÖ Extrahov√°no ${cleanText.length} znak≈Ø z PDF (${data.numpages} stran)`);
    
    return {
      success: true,
      text: cleanText,
      metadata: {
        format: 'pdf',
        pages: data.numpages,
        length: cleanText.length,
        info: data.info
      }
    };
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ PDF:', error);
    return {
      success: false,
      error: `Chyba p≈ôi ƒçten√≠ PDF souboru: ${error.message}`,
      text: null
    };
  }
}

/**
 * Parser pro RTF dokumenty (.rtf)
 */
async function parseRtf(buffer) {
  try {
    console.log('üìÑ Zpracov√°v√°m RTF soubor...');
    
    // RTF je textov√Ω form√°t, nejprve dek√≥dujeme
    const rtfContent = detectAndDecodeText(buffer);
    
    // Jednoduch√Ω RTF parser pomoc√≠ regex
    let text = rtfContent;
    
    // Odstran√≠me RTF control codes
    text = text.replace(/\\[a-z]+\d*\s?/gi, ' '); // RTF control words
    text = text.replace(/\{[^{}]*\}/g, ''); // RTF groups
    text = text.replace(/\\'/g, "'"); // Escaped quotes
    text = text.replace(/\\"/g, '"'); // Escaped quotes
    text = text.replace(/\\\\/g, '\\'); // Escaped backslashes
    text = text.replace(/\s+/g, ' '); // Multiple spaces
    text = text.trim();
    
    if (!text || text.length === 0) {
      throw new Error('RTF soubor neobsahuje ≈æ√°dn√Ω ƒçiteln√Ω text');
    }
    
    console.log(`‚úÖ Extrahov√°no ${text.length} znak≈Ø z RTF`);
    
    return {
      success: true,
      text: text,
      metadata: {
        format: 'rtf',
        length: text.length
      }
    };
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ RTF:', error);
    
    return {
      success: false,
      error: `Chyba p≈ôi ƒçten√≠ RTF souboru: ${error.message}`,
      text: null
    };
  }
}

/**
 * Parser pro Excel soubory (.xlsx, .xls)
 */
async function parseExcel(buffer) {
  try {
    console.log('üìä Zpracov√°v√°m Excel soubor...');
    
    const workbook = xlsx.read(buffer, { type: 'buffer' });
    let allText = '';
    
    // Projdeme v≈°echny worksheety
    workbook.SheetNames.forEach((sheetName, index) => {
      const worksheet = workbook.Sheets[sheetName];
      const sheetText = xlsx.utils.sheet_to_txt(worksheet);
      
      if (sheetText.trim().length > 0) {
        allText += `\n=== ${sheetName} ===\n${sheetText}\n`;
      }
    });
    
    if (!allText || allText.trim().length === 0) {
      throw new Error('Excel soubor neobsahuje ≈æ√°dn√Ω ƒçiteln√Ω text');
    }
    
    console.log(`‚úÖ Extrahov√°no ${allText.length} znak≈Ø z Excel (${workbook.SheetNames.length} list≈Ø)`);
    
    return {
      success: true,
      text: allText.trim(),
      metadata: {
        format: 'excel',
        sheets: workbook.SheetNames,
        length: allText.length
      }
    };
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ Excel:', error);
    return {
      success: false,
      error: `Chyba p≈ôi ƒçten√≠ Excel souboru: ${error.message}`,
      text: null
    };
  }
}

/**
 * Parser pro CSV soubory (.csv)
 */
async function parseCsv(buffer) {
  try {
    console.log('üìä Zpracov√°v√°m CSV soubor...');
    
    const csvContent = detectAndDecodeText(buffer);
    
    if (!csvContent || csvContent.trim().length === 0) {
      throw new Error('CSV soubor je pr√°zdn√Ω');
    }
    
    // Jednoduch√° konverze CSV na ƒçiteln√Ω text
    const lines = csvContent.split('\n');
    const textOutput = lines
      .filter(line => line.trim().length > 0)
      .map((line, index) => {
        const columns = line.split(',');
        if (index === 0) {
          return `Z√°hlav√≠: ${columns.join(' | ')}`;
        } else {
          return `≈ò√°dek ${index}: ${columns.join(' | ')}`;
        }
      })
      .join('\n');
    
    console.log(`‚úÖ Extrahov√°no ${textOutput.length} znak≈Ø z CSV (${lines.length} ≈ô√°dk≈Ø)`);
    
    return {
      success: true,
      text: textOutput,
      metadata: {
        format: 'csv',
        rows: lines.length,
        length: textOutput.length
      }
    };
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ CSV:', error);
    return {
      success: false,
      error: `Chyba p≈ôi ƒçten√≠ CSV souboru: ${error.message}`,
      text: null
    };
  }
}

/**
 * Parser pro Markdown soubory (.md)
 */
async function parseMarkdown(buffer) {
  try {
    console.log('üìù Zpracov√°v√°m Markdown soubor...');
    
    const text = detectAndDecodeText(buffer);
    
    if (!text || text.trim().length === 0) {
      throw new Error('Markdown soubor je pr√°zdn√Ω');
    }
    
    // Jednoduch√© ƒçi≈°tƒõn√≠ Markdown syntaxe pro lep≈°√≠ ƒçitelnost
    const cleanText = text
      .replace(/^#{1,6}\s+/gm, '') // odstranƒõn√≠ nadpis≈Ø #
      .replace(/\*\*(.*?)\*\*/g, '$1') // tuƒçn√Ω text
      .replace(/\*(.*?)\*/g, '$1') // kurz√≠va
      .replace(/`(.*?)`/g, '$1') // inline k√≥d
      .replace(/```[\s\S]*?```/g, '[K√ìD]') // blokov√Ω k√≥d
      .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // odkazy
      .trim();
    
    console.log(`‚úÖ Zpracov√°n Markdown (${cleanText.length} znak≈Ø)`);
    
    return {
      success: true,
      text: cleanText,
      metadata: {
        format: 'markdown',
        length: cleanText.length
      }
    };
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ Markdown:', error);
    return {
      success: false,
      error: `Chyba p≈ôi ƒçten√≠ Markdown souboru: ${error.message}`,
      text: null
    };
  }
}

/**
 * Parser pro obyƒçejn√© textov√© soubory (.txt)
 */
async function parseText(buffer) {
  try {
    console.log('üìÑ Zpracov√°v√°m textov√Ω soubor...');
    
    const text = detectAndDecodeText(buffer);
    
    if (!text || text.trim().length === 0) {
      throw new Error('Textov√Ω soubor je pr√°zdn√Ω');
    }
    
    console.log(`‚úÖ Naƒçten textov√Ω soubor (${text.length} znak≈Ø)`);
    
    return {
      success: true,
      text: text.trim(),
      metadata: {
        format: 'text',
        length: text.length
      }
    };
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ textov√©ho souboru:', error);
    return {
      success: false,
      error: `Chyba p≈ôi ƒçten√≠ textov√©ho souboru: ${error.message}`,
      text: null
    };
  }
}

/**
 * Hlavn√≠ funkce pro detekci a parsov√°n√≠ r≈Øzn√Ωch form√°t≈Ø dokument≈Ø
 */
async function parseDocument(buffer, fileName, mimeType) {
  const fileExt = fileName.toLowerCase().split('.').pop();
  
  console.log(`üîç Zpracov√°v√°m soubor: ${fileName} (${fileExt}, ${mimeType})`);
  
  try {
    // Podle p≈ô√≠pony souboru vol√≠me p≈ô√≠slu≈°n√Ω parser
    switch (fileExt) {
      case 'docx':
        return await parseDocx(buffer);
      
      case 'pdf':
        return await parsePdf(buffer);
        
      case 'pages':
        console.log('üçé Zpracov√°v√°m Apple Pages soubor...');
        return await convertPagesToText(buffer);
      
      case 'rtf':
        return await parseRtf(buffer);
      
      case 'xlsx':
      case 'xls':
        return await parseExcel(buffer);
      
      case 'csv':
        return await parseCsv(buffer);
      
      case 'md':
      case 'markdown':
        return await parseMarkdown(buffer);
      
      case 'txt':
      case 'text':
        return await parseText(buffer);
      
      default:
        // Fallback na textov√Ω parser pro nezn√°m√© form√°ty
        console.log(`‚ö†Ô∏è Nezn√°m√Ω form√°t ${fileExt}, zkou≈°√≠m textov√Ω parser`);
        return await parseText(buffer);
    }
  } catch (error) {
    console.error(`Chyba p≈ôi zpracov√°n√≠ souboru ${fileName}:`, error);
    
    // Posledn√≠ pokus - fallback na prost√Ω text
    try {
      console.log('üîÑ Zkou≈°√≠m fallback na prost√Ω text...');
      return await parseText(buffer);
    } catch (fallbackError) {
      return {
        success: false,
        error: `Nelze zpracovat soubor: ${error.message}`,
        text: null
      };
    }
  }
}

/**
 * Detekce podporovan√Ωch form√°t≈Ø podle MIME typu a p≈ô√≠pony
 */
function getSupportedFormats() {
  return {
    extensions: ['.txt', '.pages', '.docx', '.pdf', '.rtf', '.xlsx', '.xls', '.csv', '.md', '.markdown'],
    mimeTypes: [
      'text/plain',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // docx
      'application/pdf',
      'application/rtf',
      'text/rtf',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // xlsx
      'application/vnd.ms-excel', // xls
      'text/csv',
      'text/markdown',
      'application/octet-stream' // pro .pages a dal≈°√≠
    ]
  };
}

module.exports = {
  parseDocument,
  parseDocx,
  parsePdf,
  parseRtf,
  parseExcel,
  parseCsv,
  parseMarkdown,
  parseText,
  getSupportedFormats,
  detectAndDecodeText
};